#include <iostream>
#include <vector>
#include <algorithm>
 
typedef long long ll;
 
struct Project {
	ll start{}; 
	ll end{}; 
	ll reward{}; 
};
 
int main()
{
	std::ios::sync_with_stdio(false); 
	std::cin.tie(nullptr); 
 
	ll n{}; 
	std::cin >> n; 
 
	std::vector<Project> arr(n); 
 
	for (ll i{ 0 }; i < n; ++i)
	{
		std::cin >> arr[i].start >> arr[i].end >> arr[i].reward; 
	}
 
	std::vector<ll> dp(n + 1);
 
	std::sort(arr.begin(), arr.end(), [](Project& a, Project& b)
		{
			if (a.end == b.end) { return a.start < b.start; }
			return a.end < b.end; 
		});
 
	dp[0] = 0; 
 
	std::vector<ll> endTimes(n); 
 
	for (ll i{ 0 }; i < n; ++i)
	{
		endTimes[i] = arr[i].end; 
	}
 
	for (ll i{ 1 }; i <= n; ++i)
	{
		ll j = std::upper_bound(endTimes.begin(), endTimes.end(), arr[i - 1].start - 1) - endTimes.begin();
		dp[i] = std::max(dp[j] + arr[i - 1].reward, dp[i - 1]);
	}
 
	std::cout << dp[n]; 
}
