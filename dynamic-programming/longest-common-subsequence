#include <iostream>
#include <vector>
#include <algorithm>
 
typedef long long ll; 
 
int main()
{
	ll n{};
	ll m{}; 
 
	std::cin >> n >> m;
 
	std::vector<std::vector<ll>> dp(static_cast<std::size_t>(n + 1), std::vector<ll>(static_cast<std::size_t>(m + 1))); 
 
	std::vector<ll> arr1(static_cast<std::size_t>(n)); 
 
	dp[0][0] = 0; 
 
	for (ll i{ 0 }; i < n; ++i)
	{
		std::cin >> arr1[static_cast<std::size_t>(i)]; 
		dp[static_cast<std::size_t>(i)][0] = 0; 
	}
 
	std::vector<ll> arr2(static_cast<std::size_t>(m)); 
 
	for (ll i{ 0 }; i < m; ++i)
	{
		std::cin >> arr2[static_cast<std::size_t>(i)]; 
		dp[0][static_cast<std::size_t>(i)] = 0;
	}
 
	for (ll i{ 1 }; i <= n; ++i)
	{
		for (ll j{ 1 }; j <= m; ++j)
		{
			if (arr1[static_cast<std::size_t>(i - 1)] == arr2[static_cast<std::size_t>(j - 1)])
			{
				dp[static_cast<std::size_t>(i)][static_cast<std::size_t>(j)] = dp[static_cast<std::size_t>(i - 1)][static_cast<std::size_t>(j - 1)] + 1; 
			}
 
			else
			{
				dp[static_cast<std::size_t>(i)][static_cast<std::size_t>(j)] = std::max(dp[static_cast<std::size_t>(i)][static_cast<std::size_t>(j - 1)], dp[static_cast<std::size_t>(i - 1)][static_cast<std::size_t>(j)]); 
			}
		}
	}
 
	std::cout << dp[static_cast<std::size_t>(n)][static_cast<std::size_t>(m)] << "\n";
 
	std::vector<ll> ans{};
 
	ll a{ static_cast<ll>(n) };
	ll b{ static_cast<ll>(m) };
 
	while (a > 0 && b > 0)
	{
		if (arr1[static_cast<std::size_t>(a - 1)] == arr2[static_cast<std::size_t>(b - 1)])
		{
			ans.push_back(arr1[static_cast<std::size_t>(a - 1)]); 
			--a; 
			--b; 
		}
		else if (dp[static_cast<std::size_t>(a)][static_cast<std::size_t>(b - 1)] > dp[static_cast<std::size_t>(a - 1)][static_cast<std::size_t>(b)])
		{
			--b; 
		}
		else {
			--a; 
		}
	}
 
	std::reverse(ans.begin(), ans.end()); 
 
	for (auto x : ans)
	{
		std::cout << x << " "; 
	}
 
	return 0; 
}
