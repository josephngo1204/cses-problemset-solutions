#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
 
typedef long long ll;
 
int main()
{
	ll n{};
	std::cin >> n;
 
	std::vector<std::string> grid(static_cast<std::size_t>(n));
 
	for (ll i{ 0 }; i < n; ++i)
	{
		std::cin >> grid[static_cast<std::size_t>(i)]; 
	}
 
	std::vector<std::vector<ll>> path(static_cast<std::size_t>(n), std::vector<ll>(static_cast<std::size_t>(n))); 
 
	if (grid[0][0] != '*')
	{
		path[0][0] = 1;
	}
 
	else
	{
		std::cout << 0; 
		return 0; 
	}
 
	for (ll r{ 0 }; r < n; ++r)
	{
		for (ll c{ 0 }; c < n; ++c)
		{
			if (grid[static_cast<std::size_t>(r)][static_cast<std::size_t>(c)] == '*')
				continue;
 
			if (c - 1 >= 0)
			{
				path[static_cast<std::size_t>(r)][static_cast<std::size_t>(c)] += path[static_cast<std::size_t>(r)][static_cast<std::size_t>(c - 1)]; 
				path[static_cast<std::size_t>(r)][static_cast<std::size_t>(c)] %= 1000000007; 
			}
 
			if (r - 1 >= 0)
			{
				path[static_cast<std::size_t>(r)][static_cast<std::size_t>(c)] += path[static_cast<std::size_t>(r - 1)][static_cast<std::size_t>(c)];
				path[static_cast<std::size_t>(r)][static_cast<std::size_t>(c)] %= 1000000007;
			}
		}
	}
 
	std::cout << path[static_cast<std::size_t>(n - 1)][static_cast<std::size_t>(n - 1)]; 
 
	return 0; 
}
