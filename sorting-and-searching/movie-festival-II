#include <iostream>
#include <set>
#include <vector>
#include <algorithm>
 
typedef long long ll;
 
int main()
{
	ll n{};
	ll k{};
	
	std::cin >> n >> k; 
 
	std::vector<std::pair<ll, ll>> movies(static_cast<std::size_t>(n));
 
	for (ll i{}; i < n; ++i)
	{
		std::cin >> movies[static_cast<std::size_t>(i)].first >> movies[static_cast<std::size_t>(i)].second;
	}
 
	std::sort(movies.begin(), movies.end(), [](const std::pair<ll, ll>& a, const std::pair<ll, ll>& b)
		{
			if (a.first != b.first) { return a.second < b.second; }
			return a.first < b.first; 
		}); 
 
	std::multiset<ll> available{};
 
	for (ll i{}; i < k; ++i)
	{
		available.insert(0);
	}
 
	ll ans{};
 
	for (const auto& x : movies)
	{
		auto it = available.upper_bound(x.first);
 
		if (it != available.begin())
		{
			--it;
			available.erase(it); 
			available.insert(x.second); 
			++ans;
		}
	}
 
	std::cout << ans << "\n";
 
	return 0; 
}
