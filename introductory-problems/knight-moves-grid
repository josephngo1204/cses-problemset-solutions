#include <iostream>
#include <vector>
#include <algorithm>
 
std::vector<std::pair<int, int>> moves{
	{1, 2},
	{1, -2},
	{2, 1},
	{2, -1},
	{-1, 2},
	{-1, -2},
	{-2, 1},
	{-2, -1}}; 
 
int main()
{
	int n{};
	std::cin >> n;
 
	std::vector<std::vector<int>> dist(static_cast<std::size_t>(n), std::vector<int>(static_cast<std::size_t>(n), 1000000000));
	std::vector<std::pair<int, int>> q; 
	q.push_back({ 0, 0 });
	dist[0][0] = 0;
 
	for (int i{ 0 }; i < q.size(); ++i)
	{
		auto [row, col] = q[static_cast<std::size_t>(i)]; 
 
		for (std::pair<int, int> move : moves)
		{
			auto r1 = row + move.first;
			auto c1 = col + move.second; 
 
			if (0 <= std::min(r1, c1) && (std::max(r1, c1) < n) && (dist[static_cast<std::size_t>(r1)][static_cast<std::size_t>(c1)] == 1000000000))
			{
				dist[static_cast<std::size_t>(r1)][static_cast<std::size_t>(c1)] = dist[static_cast<std::size_t>(row)][static_cast<std::size_t>(col)] + 1;
				q.push_back({ r1, c1 });
			}
		}
	}
 
	for (int j{ 0 }; j < n; ++j)
	{
		for (int k{ 0 }; k < n; ++k)
		{
			std::cout << dist[static_cast<std::size_t>(j)][static_cast<std::size_t>(k)] << " "; 
		}
		std::cout << "\n"; 
	}
 
	return 0; 
}
