#include <iostream>
#include <algorithm>
#include <vector>
 
typedef long long ll;
 
ll count{}; 
 
void chess(ll row, std::vector<bool>& col, std::vector<bool>& dia1, std::vector<bool>& dia2, std::vector<std::string>& board)
{
	if (row == 8)
	{
		++count; 
		return; 
	}
 
	for (int i{ 0 }; i < 8; ++i)
	{
		if (board[static_cast<std::size_t>(row)][static_cast<std::size_t>(i)] == '*' || col[static_cast<std::size_t>(i)] || dia1[static_cast<std::size_t>(row) + i] || dia2[static_cast<std::size_t>(row) - i + 7])
			continue; 
 
		col[static_cast<std::size_t>(i)] = dia1[static_cast<std::size_t>(row) + i] = dia2[static_cast<std::size_t>(row) - i + 7] = true;
		
		chess(row + 1, col, dia1, dia2, board);
 
		col[static_cast<std::size_t>(i)] = dia1[static_cast<std::size_t>(row) + i] = dia2[static_cast<std::size_t>(row) - i + 7] = false;
	}
}
 
int main()
{
	std::vector<std::string> board(8);
 
	for (int i{ 0 }; i < board.size(); ++i)
	{
		std::cin >> board[static_cast<std::size_t>(i)]; 
	}
 
	std::vector<bool> col(8); 
	std::vector<bool> dia1(15); 
	std::vector<bool> dia2(15); 
 
	chess(0, col, dia1, dia2, board);
 
	std::cout << count << "\n"; 
 
	return 0; 
 
}
